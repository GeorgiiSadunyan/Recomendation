import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import requests
from PIL import Image
from io import BytesIO
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="üçø–§–∏–ª—å–º—ã",
    page_icon="üé¨",
)

# --- –°—Ç–∏–ª–∏ CSS ---
def load_css():
    st.markdown("""
    <style>
    .movie-card {
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: transform 0.2s;
        background-color: #262730;
    }
    .movie-card:hover {
        transform: scale(1.02);
    }
    .title {
        color: #FF4B4B;
        font-size: 1.5em !important;
    }
    .genre {
        color: #8A8A8A;
        font-style: italic;
    }
    .stButton>button {
        background-color: #FF4B4B !important;
        color: white !important;
    }
    </style>
    """, unsafe_allow_html=True)

load_css()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data():
    try:
        movies = pd.read_csv("movies.csv")
        
        movies['genres'] = movies['genres'].apply(
        lambda x: [x] if isinstance(x, str) and '|' not in x else x.split('|') if isinstance(x, str) else []
        )
        
        ratings = pd.read_csv(
            "ratings.csv",
            header=None,  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ—Ç
            names=["userId", "movieId", "rating", "timestamp"],
            dtype={'userId': int, 'movieId': int, 'rating': float, 'timestamp': str},
            skiprows=1
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        if ratings.empty or movies.empty:
            st.error("–û–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç!")
            return None, None
            
        return movies, ratings
        
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None, None

movies, ratings = load_data()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if not os.path.exists("ratings.csv"):
    st.error("–§–∞–π–ª ratings.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
if ratings is None or movies is None:
    st.stop()

if ratings.empty or movies.empty:
    st.error("–§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç—ã!")
    st.stop()

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ID
max_user_id = int(ratings['userId'].max()) if not ratings['userId'].empty else 1

try:
    user_id = st.number_input(
        "–í–∞—à User ID", 
        min_value=1, 
        max_value=max_user_id,
        value=min(1, max_user_id),
        help=f"–î–æ—Å—Ç—É–ø–Ω—ã–µ ID: –æ—Ç 1 –¥–æ {max_user_id}"
    )
    if st.button("üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", use_container_width=True):
        st.session_state['recommend'] = True
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}")
    st.stop()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–µ—Ä–∞ —Ñ–∏–ª—å–º–∞ (—á–µ—Ä–µ–∑ OMDb API) ---
def get_poster(title):
    try:
        response = requests.get(f"http://img.omdbapi.com/?apikey=5fc1940d&t={title}")
        return response.url if response.status_code == 200 else None
    except:
        return None

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title("üé¨ MovieMagic Recommender")
st.markdown("""
<style>
[data-testid="stMarkdownContainer"] p {
    font-size: 1.1em !important;
}
</style>
""", unsafe_allow_html=True)

# --- –°–∞–π–¥–±–∞—Ä ---
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# --- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
if 'recommend' in st.session_state:
    st.subheader("üîÆ –í–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è")
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –º–æ–¥–µ–ª—å)
    recommended_movies = movies.sample(5)
    
    cols = st.columns(2)
    for i, row in recommended_movies.iterrows():
        with cols[i % 2]:
            with st.container():
                st.markdown(f"""
                <div class="movie-card">
                    <h3 class="title">{row['title']}</h3>
                    <p class="genre">{', '.join(row['genres'])}</p>
                    <img src="https://via.placeholder.com/300x450?text=Poster+Missing" width="100%">
                </div>
                """, unsafe_allow_html=True)

# --- –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º ---
st.divider()
st.subheader("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É")

selected_genres = st.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã", 
    options=sorted(set([g for genres in movies['genres'] for g in genres])),
    default=["Comedy", "Action"]
)

if selected_genres:
    filtered_movies = movies[movies['genres'].apply(lambda x: any(g in x for g in selected_genres))]
    st.dataframe(
        filtered_movies[['title', 'genres']],
        column_config={
            "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
            "genres": "–ñ–∞–Ω—Ä—ã"
        },
        hide_index=True,
        use_container_width=True
    )