import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import requests
from PIL import Image
from io import BytesIO
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="üçø –ö–∏–Ω–æ—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å")

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
.movie-card {
    border-radius: 10px;
    padding: 15px;
    margin: 10px 0;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    background-color: #f0f2f6;
}
.title {
    color: #ff4b4b;
    font-size: 1.2em !important;
}
.genre {
    color: #666;
    font-style: italic;
}
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    movies = pd.read_csv("movies.csv")
    ratings = pd.read_csv("ratings.csv", 
                         header=None,
                         names=["userId", "movieId", "rating", "timestamp"])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–æ–≤
    movies['genres'] = movies['genres'].apply(
        lambda x: [x] if '|' not in str(x) else str(x).split('|')
    )
    return movies, ratings

movies, ratings = load_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
def get_poster(title):
    return None  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API

# –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üé¨ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤")

# –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
user_id = st.number_input(
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", 
    min_value=1, 
    max_value=ratings['userId'].max(),
    value=1
)

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
    # –í–∞—à –∫–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommended_movies = movies.sample(5)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    
    st.subheader("–í–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:")
    cols = st.columns(2)
    for i, row in recommended_movies.iterrows():
        with cols[i%2]:
            poster = get_poster(row['title'])
            if poster:
                st.image(poster, width=150)
            else:
                st.image("https://via.placeholder.com/150x225?text=No+Poster", width=150)
            
            st.markdown(f"""
            <div class="movie-card">
                <div class="title">{row['title']}</div>
                <div class="genre">{', '.join(row['genres'])}</div>
            </div>
            """, unsafe_allow_html=True)

# –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º
st.divider()
st.subheader("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É")

all_genres = sorted({g for genres in movies['genres'] for g in genres})
selected_genres = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã:", all_genres)

if selected_genres:
    filtered_movies = movies[movies['genres'].apply(
        lambda x: any(g in x for g in selected_genres)
    )].head(20)
    
    for _, row in filtered_movies.iterrows():
        st.markdown(f"- **{row['title']}** ({', '.join(row['genres'])})")