import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üçø –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤")


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
@st.cache_data
def load_data():
    movies = pd.read_csv("movies.csv")
    # –ß–∏—Ç–∞–µ–º ratings.csv, —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—è —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫ –∏ –ø—Ä–æ–ø—É—Å–∫–∞—è —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    ratings = pd.read_csv("ratings.csv", 
                         names=["userId", "movieId", "rating", "timestamp"],
                         header=None,
                         dtype={'userId': int, 'movieId': int, 'rating': float, 'timestamp': str},
                         skiprows=1)
    return movies, ratings

movies, ratings = load_data()

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# st.write("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ ratings:")
# st.write(ratings.head())

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ rating –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ–≤–æ–π
ratings['rating'] = pd.to_numeric(ratings['rating'], errors='coerce')
ratings = ratings.dropna(subset=['rating'])

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
movies['genres'] = movies['genres'].str.split('|')

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ñ–∏–ª—å–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
try:
    user_movie_matrix = ratings.pivot_table(
        index='userId', 
        columns='movieId', 
        values='rating', 
        aggfunc='mean'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
    ).fillna(0)
    
    # # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    # st.write(f"–†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ñ–∏–ª—å–º: {user_movie_matrix.shape}")
    # st.write("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã:")
    # st.write(user_movie_matrix.iloc[:5, :5])
    
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã: {str(e)}")
    st.stop()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def recommend_movies(user_id, top_n=5):
    try:
        if user_id not in user_movie_matrix.index:
            return pd.DataFrame()
            
        user_ratings = user_movie_matrix.loc[user_id].values.reshape(1, -1)
        similarities = cosine_similarity(user_ratings, user_movie_matrix)
        similar_users = np.argsort(similarities[0])[::-1][1:top_n+1]
        
        recommended_movies = ratings[ratings["userId"].isin(similar_users)]
        top_movies = recommended_movies.groupby("movieId")["rating"].mean().sort_values(ascending=False).head(top_n)
        
        return movies[movies['movieId'].isin(top_movies.index)][['title', 'genres']]
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
        return pd.DataFrame()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2 = st.tabs(["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–ü–æ–∏—Å–∫"])

with tab1:
    st.subheader("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    user_id = st.number_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à user_id:", 
                            min_value=1, 
                            max_value=ratings['userId'].max(), 
                            value=1)
    
    if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        recommendations = recommend_movies(user_id)
        if not recommendations.empty:
            st.write("–í–∞–º –º–æ–≥—É—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:")
            for i, row in recommendations.iterrows():
                st.write(f"- **{row['title']}** ({', '.join(row['genres'])})")
        else:
            st.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID.")

with tab2:
    st.subheader("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É")
    all_genres = sorted(set([genre for sublist in movies['genres'] for genre in sublist]))
    selected_genres = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã:", all_genres)
    
    if selected_genres:
        mask = movies['genres'].apply(lambda x: any(genre in x for genre in selected_genres))
        filtered_movies = movies[mask][['title', 'genres']].head(20)
        st.write(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(filtered_movies)}")
        for i, row in filtered_movies.iterrows():
            st.write(f"- **{row['title']}** ({', '.join(row['genres'])})")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
st.sidebar.markdown("### –û —Å–∏—Å—Ç–µ–º–µ")
st.sidebar.write("""
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:
1. –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ö–æ–∂–∏–º–∏ –≤–∫—É—Å–∞–º–∏
2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–ª–∏
""")
st.sidebar.write(f"–í—Å–µ–≥–æ —Ñ–∏–ª—å–º–æ–≤: {len(movies)}")
st.sidebar.write(f"–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}")
st.sidebar.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_movie_matrix.shape[0]}")
st.sidebar.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {user_movie_matrix.shape[1]}")