import streamlit as st
import pandas as pd
import os


st.title("üçø –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤")
NEW_RATINGS_FILE = "new_ratings.csv"


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
@st.cache_data
def load_data():
    movies = pd.read_csv("movies.csv")

    ratings = pd.read_csv("ratings.csv", 
                         names=["userId", "movieId", "rating", "timestamp"],
                         header=None,
                         dtype={'userId': int, 'movieId': int, 'rating': float, 'timestamp': str},
                         skiprows=1)
    return movies, ratings


movies, ratings = load_data()


if 'current_user' not in st.session_state:
    st.session_state.current_user = None
if 'onboarding' not in st.session_state:
    st.session_state.onboarding = False


# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ rating –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ–≤–æ–π
ratings['rating'] = pd.to_numeric(ratings['rating'], errors='coerce')
ratings = ratings.dropna(subset=['rating'])

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
movies['genres'] = movies['genres'].str.split('|')


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def save_ratings(user_id, ratings_dict):
    """–ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –≤ CSV"""
    new_data = pd.DataFrame({
        'userId': [user_id] * len(ratings_dict),
        'movieId': list(ratings_dict.keys()),
        'rating': list(ratings_dict.values())
    })
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª (–¥–æ–∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω–µ—Ü)
    new_data.to_csv('new_ratings.csv', mode='a', header=not os.path.exists('new_ratings.csv'), index=False)
    
    
# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ñ–∏–ª—å–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
try:
    user_movie_matrix = ratings.pivot_table(
        index='userId', 
        columns='movieId', 
        values='rating', 
        aggfunc='mean'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
    ).fillna(0)
    
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã: {str(e)}")
    st.stop()



# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
def generate_user_id():
    existing_ids = set(ratings['userId'].unique())
    if os.path.exists(NEW_RATINGS_FILE):
        new_ratings = pd.read_csv(NEW_RATINGS_FILE)
        existing_ids.update(new_ratings['userId'].unique())
    return max(existing_ids) + 1 if existing_ids else 1



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤)
def recommend_movies(user_id, top_n=5):
    try:
        # return movies.sample(5)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (—Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ)
        all_ratings = pd.concat([ratings, pd.read_csv(NEW_RATINGS_FILE)] if os.path.exists(NEW_RATINGS_FILE) else ratings)
        
        # 1. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_ratings = all_ratings[all_ratings['userId'] == user_id]
        
        # Fallback –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_ratings.empty:
            return get_popular_movies(top_n)
        
        # 2. –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
        movie_stats = all_ratings.groupby('movieId').agg(
            avg_rating=('rating', 'mean'),
            num_ratings=('rating', 'count')
        ).reset_index()
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_movies = user_ratings.merge(movies, on='movieId')
        liked_genres = list(set([genre for sublist in user_movies['genres'] for genre in sublist]))
        
        # 4. –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏–∑ –ª—é–±–∏–º—ã—Ö –∂–∞–Ω—Ä–æ–≤
        candidates = movies[
            (~movies['movieId'].isin(user_ratings['movieId'])) &
            (movies['genres'].apply(lambda x: any(g in x for g in liked_genres)))
        ]
        
        # 5. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        recommendations = candidates.merge(movie_stats, on='movieId')
        recommendations = recommendations.sort_values(
            by=['num_ratings', 'avg_rating'], 
            ascending=[False, False]
        )
        
        return recommendations.head(top_n)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
        return pd.DataFrame()
 
 
  # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
def get_popular_movies(top_n):
    return movies.merge(
        ratings.groupby('movieId')['rating'].count().reset_index(name='num_ratings'),
        on='movieId'
    ).sort_values('num_ratings', ascending=False).head(top_n)
   
    
# –ü—Ä–æ—Ñ–∏–ª—å
def show_user_profile(user_id):
    user_ratings = ratings[ratings['userId'] == user_id]
    if not user_ratings.empty:
        st.subheader(f"–í–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã (UserID: {user_id})")
        liked_movies = user_ratings.merge(movies, on='movieId').sort_values('rating', ascending=False)
        st.dataframe(liked_movies[['title', 'genres', 'rating']].head(10))
    else:
        st.warning("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.")


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2, tab3 = st.tabs(["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–ü–æ–∏—Å–∫", "–ü—Ä–æ—Ñ–∏–ª—å"])


with tab1:
    st.subheader("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    new_ratings = pd.read_csv(NEW_RATINGS_FILE)
    user_id = st.number_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à user_id:", 
                            min_value=1, 
                            max_value=new_ratings['userId'].max(),
                            value=1)
    
    if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        recommendations = recommend_movies(user_id)
        if not recommendations.empty:
            st.write(f"5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
            for i, row in recommendations.iterrows():
                st.write(f"- **{row['title']}** ({', '.join(row['genres'])})")
        else:
            st.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID.")



with tab2:
    st.subheader("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É")
    all_genres = sorted(set([genre for sublist in movies['genres'] for genre in sublist]))
    selected_genres = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã:", all_genres)
    
    if selected_genres:
        mask = movies['genres'].apply(lambda x: any(genre in x for genre in selected_genres))
        filtered_movies = movies[mask][['title', 'genres']].head(20)
        st.write(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(filtered_movies)}")
        for i, row in filtered_movies.iterrows():
            st.write(f"- **{row['title']}** ({', '.join(row['genres'])})")


with tab3:
    show_user_profile(user_id)
    
    
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
# –ì–ª–æ–±–∞–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
if 'new_user_ratings' not in st.session_state:
    st.session_state.new_user_ratings = pd.DataFrame(columns=['userId', 'movieId', 'rating'])


def add_new_user():
    new_id = generate_user_id()
    st.session_state.current_user = new_id
    st.session_state.new_user_ratings = pd.DataFrame(columns=['userId', 'movieId', 'rating'])
    st.session_state.onboarding = True
    return new_id


# –ö–Ω–æ–ø–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
if st.sidebar.button("‚ûï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"):
    new_id = add_new_user()
    st.success(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {new_id}")
    st.session_state.onboarding = True  # –§–ª–∞–≥ –¥–ª—è onboarding

    
# –í—ã–±–æ—Ä 10 —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def onboarding_step(user_id):
    global ratings 
    st.subheader("–®–∞–≥ 1/1: –û—Ü–µ–Ω–∏—Ç–µ 10 —Ñ–∏–ª—å–º–æ–≤")
    sample_movies = movies.sample(10)
    
    with st.form("onboarding_form"):
        ratings_input = {}
        for _, row in sample_movies.iterrows():
            ratings_input[row['movieId']] = st.slider(
                f"–§–∏–ª—å–º: {row['title']} ({', '.join(row['genres'])})",
                0.5, 5.0, 3.0, step=0.5,
                key=f"rate_{row['movieId']}"
            )
        
        if st.form_submit_button("üíæ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏"):
            save_ratings(st.session_state.current_user, ratings_input)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame
            new_ratings = pd.DataFrame({
                'userId': [st.session_state.current_user] * len(ratings_input),
                'movieId': list(ratings_input.keys()),
                'rating': list(ratings_input.values())
            })
            ratings = pd.concat([ratings, new_ratings], ignore_index=True)
            
            st.success("–û—Ü–µ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.session_state.onboarding = False
            st.rerun()  
            
  
# –°—Ç–∞—Ç—É—Å –¥–ª—è –°–∞–π–¥–±–∞—Ä–∞ 
def get_current_stats():
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
    if os.path.exists(NEW_RATINGS_FILE):
        all_ratings = pd.concat([ratings, pd.read_csv(NEW_RATINGS_FILE)])
    else:
        all_ratings = ratings.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    if 'new_user_ratings' in st.session_state and not st.session_state.new_user_ratings.empty:
        all_ratings = pd.concat([all_ratings, st.session_state.new_user_ratings])
    
    return {
        "movies_total": len(movies),
        "ratings_total": len(all_ratings),
        "users_total": all_ratings['userId'].nunique(),
    }


# –ü—Ä–æ–≤–µ—Ä—è–µ–º onboarding-—Ä–µ–∂–∏–º
if st.session_state.onboarding:  # –í–º–µ—Å—Ç–æ hasattr
    onboarding_step(st.session_state.current_user)
    st.stop()
    
#–±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
stats = get_current_stats()
st.sidebar.metric("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", stats["users_total"])
st.sidebar.metric("üé¨ –§–∏–ª—å–º–æ–≤", stats["movies_total"])
st.sidebar.metric("‚≠ê –û—Ü–µ–Ω–æ–∫", stats["ratings_total"])